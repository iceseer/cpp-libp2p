#include <libp2p/muxer/yamux/hardware_tracker.hpp>
#include <libp2p/muxer/yamux/yamuxed_connection.hpp>

#include <sys/mman.h>
#include <sys/syscall.h>
#include <linux/perf_event.h>
#include <asm/unistd.h>
#include <cstdio>

namespace libp2p::connection {

HardwareSharedPtrTracker* HardwareSharedPtrTracker::instance_ = nullptr;

HardwareSharedPtrTracker::HardwareSharedPtrTracker() {
    instance_ = this;
    
    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ SIGTRAP –¥–ª—è hardware breakpoints
    struct sigaction sa;
    sa.sa_sigaction = signalHandler;
    sigemptyset(&sa.sa_mask);
    sa.sa_flags = SA_SIGINFO | SA_RESTART;
    
    if (sigaction(SIGTRAP, &sa, &old_sigtrap_action_) == -1) {
        std::cerr << "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ SIGTRAP\n";
    }
    
    std::cout << "üîß HardwareSharedPtrTracker –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω\n";
}

HardwareSharedPtrTracker::~HardwareSharedPtrTracker() {
    stopTracking();
    
    // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ä—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–∞
    sigaction(SIGTRAP, &old_sigtrap_action_, nullptr);
    
    instance_ = nullptr;
}

void* HardwareSharedPtrTracker::getRefCountAddress(const std::shared_ptr<YamuxedConnection>& ptr) {
    // shared_ptr —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ –¥–≤—É—Ö —É–∫–∞–∑–∞—Ç–µ–ª–µ–π:
    // - —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ –æ–±—ä–µ–∫—Ç
    // - —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ control block (—Å–æ–¥–µ—Ä–∂–∏—Ç —Å—á–µ—Ç—á–∏–∫–∏ —Å—Å—ã–ª–æ–∫)
    
    // –ü–æ–ª—É—á–∞–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ control block –∏–∑ shared_ptr
    // –≠—Ç–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞, –Ω–æ –º—ã –º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å –∫ –Ω–µ–π –¥–æ—Å—Ç—É–ø
    struct shared_ptr_internal {
        void* ptr;
        void* control_block;
    };
    
    auto* internal = reinterpret_cast<const shared_ptr_internal*>(&ptr);
    void* control_block = internal->control_block;
    
    if (!control_block) {
        return nullptr;
    }
    
    // –í control block —Å—á–µ—Ç—á–∏–∫ shared_ptr –æ–±—ã—á–Ω–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ —Å–º–µ—â–µ–Ω–∏—é 0
    // (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–∏)
    void* ref_count_addr = control_block;
    
    std::cout << "üìç –ê–¥—Ä–µ—Å control block: " << control_block << "\n";
    std::cout << "üìç –ê–¥—Ä–µ—Å —Å—á–µ—Ç—á–∏–∫–∞ —Å—Å—ã–ª–æ–∫: " << ref_count_addr << "\n";
    std::cout << "üìç –¢–µ–∫—É—â–∏–π use_count: " << ptr.use_count() << "\n";
    
    return ref_count_addr;
}

bool HardwareSharedPtrTracker::setHardwareWatchpoint(void* address) {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º perf_event –¥–ª—è hardware watchpoint
    struct perf_event_attr pe;
    memset(&pe, 0, sizeof(pe));
    
    pe.type = PERF_TYPE_BREAKPOINT;
    pe.size = sizeof(pe);
    pe.config = 0;
    pe.bp_type = HW_BREAKPOINT_W | HW_BREAKPOINT_R;  // Watch reads and writes
    pe.bp_addr = reinterpret_cast<uint64_t>(address);
    pe.bp_len = sizeof(long);  // –†–∞–∑–º–µ—Ä —Å—á–µ—Ç—á–∏–∫–∞ —Å—Å—ã–ª–æ–∫
    pe.disabled = 0;
    pe.exclude_kernel = 1;
    pe.exclude_hv = 1;
    
    // –°–æ–∑–¥–∞–µ–º hardware breakpoint —á–µ—Ä–µ–∑ perf_event_open
    int fd = syscall(__NR_perf_event_open, &pe, 0, -1, -1, 0);
    if (fd == -1) {
        perror("‚ùå perf_event_open –¥–ª—è hardware watchpoint");
        return false;
    }
    
    std::cout << "‚úÖ Hardware watchpoint —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ –∞–¥—Ä–µ—Å " << address 
              << " (fd=" << fd << ")\n";
    
    return true;
}

bool HardwareSharedPtrTracker::removeHardwareWatchpoint() {
    // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ watchpoint
    // –ù–æ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø–æ–∫–∞ –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–º
    std::cout << "üóëÔ∏è Hardware watchpoint —É–¥–∞–ª–µ–Ω\n";
    return true;
}

void HardwareSharedPtrTracker::signalHandler(int sig, siginfo_t* info, void* context) {
    if (!instance_ || sig != SIGTRAP) {
        return;
    }
    
    std::cout << "\nüéØ === HARDWARE BREAKPOINT TRIGGERED ===\n";
    std::cout << "–°–∏–≥–Ω–∞–ª: " << sig << "\n";
    std::cout << "–ê–¥—Ä–µ—Å: " << info->si_addr << "\n";
    
    // –í—ã–≤–æ–¥–∏–º —Å—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤
    instance_->printStackTrace();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –æ–±—ä–µ–∫—Ç
    instance_->checkAndSwitchIfNeeded();
    
    std::cout << "==========================================\n\n";
}

void HardwareSharedPtrTracker::printStackTrace() {
    const int max_frames = 20;
    void* buffer[max_frames];
    
    int nframes = backtrace(buffer, max_frames);
    char** symbols = backtrace_symbols(buffer, nframes);
    
    std::cout << "üìö –°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤ (–∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ —Å—Å—ã–ª–æ–∫):\n";
    
    for (int i = 0; i < nframes; ++i) {
        std::cout << "  [" << i << "] " << (symbols ? symbols[i] : "???") << "\n";
    }
    
    if (symbols) {
        free(symbols);
    }
}

void HardwareSharedPtrTracker::checkAndSwitchIfNeeded() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∂–∏–≤ –ª–∏ —Ç–µ–∫—É—â–∏–π –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–π –æ–±—ä–µ–∫—Ç
    if (auto ptr = current_tracked_ptr_.lock()) {
        long count = ptr.use_count();
        std::cout << "üìä –¢–µ–∫—É—â–∏–π use_count: " << count << "\n";
        
        if (count <= 1) {
            std::cout << "üíÄ –û–±—ä–µ–∫—Ç —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω (use_count=" << count << ")\n";
            std::cout << "üîÑ –û–∂–∏–¥–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π YamuxedConnection –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è...\n";
            
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ
            stopTracking();
        }
    } else {
        std::cout << "üíÄ –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–π –æ–±—ä–µ–∫—Ç —É–∂–µ —É–¥–∞–ª–µ–Ω\n";
        std::cout << "üîÑ –û–∂–∏–¥–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π YamuxedConnection –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è...\n";
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ
        stopTracking();
    }
}

void HardwareSharedPtrTracker::startTracking(std::shared_ptr<YamuxedConnection> ptr) {
    if (!enabled_) {
        return;
    }
    
    // –ï—Å–ª–∏ —É–∂–µ —á—Ç–æ-—Ç–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
    if (is_tracking_) {
        stopTracking();
    }
    
    std::cout << "\nüéØ === –ù–ê–ß–ê–õ–û HARDWARE –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–Ø ===\n";
    std::cout << "YamuxedConnection –∞–¥—Ä–µ—Å: " << ptr.get() << "\n";
    std::cout << "shared_ptr use_count: " << ptr.use_count() << "\n";
    
    // –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å —Å—á–µ—Ç—á–∏–∫–∞ —Å—Å—ã–ª–æ–∫
    void* ref_count_addr = getRefCountAddress(ptr);
    if (!ref_count_addr) {
        std::cerr << "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–¥—Ä–µ—Å —Å—á–µ—Ç—á–∏–∫–∞ —Å—Å—ã–ª–æ–∫\n";
        return;
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º hardware watchpoint
    if (!setHardwareWatchpoint(ref_count_addr)) {
        std::cerr << "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å hardware watchpoint\n";
        return;
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    watched_address_ = ref_count_addr;
    current_tracked_ptr_ = ptr;
    is_tracking_ = true;
    
    std::cout << "‚úÖ Hardware –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ\n";
    std::cout << "==========================================\n\n";
}

void HardwareSharedPtrTracker::stopTracking() {
    if (!is_tracking_) {
        return;
    }
    
    std::cout << "\nüõë === –û–°–¢–ê–ù–û–í–ö–ê HARDWARE –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–Ø ===\n";
    
    // –£–¥–∞–ª—è–µ–º hardware watchpoint
    removeHardwareWatchpoint();
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    watched_address_ = nullptr;
    current_tracked_ptr_.reset();
    is_tracking_ = false;
    
    std::cout << "‚úÖ Hardware –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ\n";
    std::cout << "==========================================\n\n";
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ yamux.cpp
void trackNextYamuxedConnection(std::shared_ptr<YamuxedConnection> ptr) {
    auto& tracker = HardwareSharedPtrTracker::getInstance();
    
    // –ï—Å–ª–∏ —Å–µ–π—á–∞—Å –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è - –Ω–∞—á–∏–Ω–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ
    if (!tracker.isTracking()) {
        tracker.startTracking(std::move(ptr));
    } else {
        std::cout << "‚è≥ –£–∂–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è –¥—Ä—É–≥–æ–π YamuxedConnection, –∂–¥–µ–º –µ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...\n";
    }
}

} // namespace libp2p::connection 